# -*- coding: utf-8 -*-
"""Sales_Prediction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d0LwLg3n1lblQeKmnPWsgSLAnteANGpO
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor

df = pd.read_csv('C:\\Users\\Anand Kumar\Desktop\\Sales_Prediction\\Sales.csv')

df.head()

df.tail()

df.shape

df.size

df.describe()

df.columns

df.info()

df_copy = df.copy()

df.isnull().sum()

df_copy['Item_Weight'] = df_copy['Item_Weight'].fillna(value=df_copy['Item_Weight'].mean())
df_copy['Outlet_Size'] = df_copy['Outlet_Size'].fillna(value=df_copy['Outlet_Size'].mode()[0])

df_copy.isnull().sum()

num_data = df_copy.select_dtypes(exclude=['object'])
num_data.head()

num_data.describe()

num_data.isnull().sum()

cat_data = df_copy.select_dtypes(include=['object'])
cat_data.head()

cat_data.describe()

cat_data['Item_Identifier'].value_counts()

cat_data['Item_Fat_Content'].value_counts()

cat_data['Item_Type'].value_counts()

cat_data['Outlet_Identifier'].value_counts()

cat_data['Outlet_Size'].value_counts()

cat_data['Outlet_Location_Type'].value_counts()

cat_data['Outlet_Type'].value_counts()

df_copy['Item_Identifier'].apply(lambda x: x[:2]).value_counts()

df['Item_Identifier'].str[:2].value_counts() # by string method

# # Step 1: Map Item Id to Item Types
# def create_item_type(data_frame):
#   data_frame['Item_Type'] = data_frame['Item_Identifier'].str[:2]
#   data_frame['Item_Type'] = data_frame['Item_Type'].map({
#       "FD":"Food", "NC":"Non_Consumables", "DR":"Drink"
#   })
#   return data_frame

# df_copy = create_item_type(df_copy)
# df_copy.head()

df_copy[['Item_Identifier','Item_Weight']].drop_duplicates().sort_values(by=['Item_Identifier'])

df_copy[['Item_Type','Item_Weight']].drop_duplicates().sort_values(by=['Item_Type'])

df_copy['Item_Fat_Content'].value_counts()

def standardize_item_fat_content(data_frame):
  data_frame['Item_Fat_Content'] = data_frame['Item_Fat_Content'].replace({
      'Low Fat':'Low_Fat',
      'LF':"Low_Fat",
      "reg":"Regular",
      "low fat":"Low_Fat"
  })
  return data_frame

df_copy = standardize_item_fat_content(df_copy)
df_copy['Item_Fat_Content'].value_counts()

df_copy.groupby(by=['Item_Type','Item_Fat_Content']).size()

df_copy.loc[df_copy['Item_Type']=='Non-Consumable','Item_Fat_Content']='Non-Edible'

def correct_item_fat_content(data_frame):
  data_frame.loc[data_frame['Item_Type'] == 'Non_Consumables','Item_Fat_Content'] ='Non_Edible'
  return data_frame

df_copy = correct_item_fat_content(df_copy)
df_copy.groupby(by=['Item_Type',"Item_Fat_Content"]).size()

df_copy.info()

df_copy.head()

from sklearn.preprocessing import LabelEncoder
lb=LabelEncoder()
var=['Item_Identifier','Item_Fat_Content','Outlet_Location_Type','Outlet_Type','Outlet_Size','Item_Type','Outlet_Identifier']
lb=LabelEncoder()
for item in var:
    df_copy[item]=lb.fit_transform(df_copy[item])

df_copy.head()

"""# Visualization"""

plt.figure(figsize= (23,8))
plt.title("Types of product")
sns.countplot(x = df['Item_Type'])

plt.title("Fat content")
sns.countplot(x = df['Item_Fat_Content'])

plt.title("According to the size of outlet")
sns.countplot(x = df['Outlet_Size'])

plt.figure(figsize = (10,5))
plt.title("Types of outlet")
sns.countplot(x = df['Outlet_Type'])

plt.figure(figsize = (23,10))
plt.title("Comparison of product price in different stores")
sns.barplot(y = df['Item_MRP'] , x = df['Item_Type'] , hue=df['Outlet_Type'] , errwidth = 0)

plt.title("Sales according the size of the store")
sns.boxplot(x = df['Outlet_Size'] , y = df['Item_Outlet_Sales'])

plt.figure(figsize = (10,5))
plt.title("Sales according to the location and outlet type")
sns.barplot(x=df['Outlet_Type'],y=df['Item_Outlet_Sales'], hue=df['Outlet_Location_Type'],errwidth=0)

plt.figure(figsize = (10,5))
plt.title("Sales according to outlet type and outlet size")
sns.barplot(x=df['Outlet_Type'],y=df['Item_Outlet_Sales'], hue=df['Outlet_Size'],errwidth=0)

X = df_copy.drop('Item_Outlet_Sales',axis = 1)
y = df_copy['Item_Outlet_Sales']

X_train,X_test,y_train,y_test = train_test_split(X,y,test_size = 0.33 , random_state = 1)

LR = LinearRegression()
logmodel = LR.fit(X_train,y_train)
y_pred = LR.predict(X_test)
print("Accuracy : ",LR.score(X_test,y_test)*100)

RF = RandomForestRegressor()
rmodel = RF.fit(X_train,y_train)
y_pred = RF.predict(X_test)
print("Accuracy : ",RF.score(X_test,y_test)*100)

# from xgboost import XGBRFRegressor
# xg = XGBRFRegressor()
# xgmodel = xg.fit(X_train,y_train)
# y_pred = xg.predict(X_test)
# print("Accuracy : ",xg.score(X_test,y_test)*100)